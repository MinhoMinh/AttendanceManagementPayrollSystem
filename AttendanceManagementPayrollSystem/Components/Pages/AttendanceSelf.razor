@page "/attendance/self"

@using System.Net.Http.Json
@using AttendanceManagementPayrollSystem.DTO
@using BlazorCalendar
@using BlazorCalendar.Models
@using System.Text.Json
@inject IHttpClientFactory HttpFactory
@inject IJSRuntime JS

<Card>
    <CardBody>
        <Div Class="d-flex flex-row align-items-start gap-3">
            <Field>
                <FieldLabel>Xem theo</FieldLabel>
                <Select TValue="DisplayedView" @bind-SelectedValue="SelectedView">
                    <SelectItem Value="DisplayedView.Annual">Theo năm</SelectItem>
                    <SelectItem Value="DisplayedView.Monthly">Theo tháng</SelectItem>
                </Select>
            </Field>
            

        @if (SelectedView == DisplayedView.Monthly)
        {
                <Field>
                    <FieldLabel>Chọn tháng/năm</FieldLabel>
                    <FieldBody>
                        <Div Class="d-flex flex-column picker-container" Position="Position.Relative">
                        <DatePicker TValue="DateTime?"
                                    Date="@SelectedDate"
                                        DateChanged="@(value => OnMonthlyDateChanged(value))"
                                    DisplayFormat="MM/yyyy" />
                        </Div>
                    </FieldBody>
                </Field>

                <Field>
                    <FieldLabel>Loại hiển thị</FieldLabel>
                    <FieldBody>
                        <Div Class="d-flex flex-row align-items-center gap-3">
                            <Check TValue="bool" @bind-Checked="ShowCongMonthly">Công</Check>
                            <Check TValue="bool" @bind-Checked="ShowGioVuotMonthly">Giờ vượt</Check>
                            <Check TValue="bool" @bind-Checked="ShowNgayNghiMonthly">Ngày nghỉ</Check>
                            <Check TValue="bool" @bind-Checked="ShowNgayLeMonthly">Ngày lễ</Check>
                        </Div>
                    </FieldBody>
                </Field>
        }
            else if (SelectedView == DisplayedView.Annual)
            {
                <Div Class="d-flex flex-row align-items-start gap-2">
                    <Field>
                        <FieldLabel>Ngày bắt đầu</FieldLabel>
                        <FieldBody>
                            <Div Class="d-flex flex-column picker-container" Position="Position.Relative">
                                <DatePicker TValue="DateTime?"
                                            Date="@SelectedDate"
                                            DateChanged="@(value => OnAnnualDateChanged(value))"
                                            DisplayFormat="dd/MM/yyyy" />
                            </Div>
                        </FieldBody>
                        <FieldHelp>Format: DD/MM/YYYY</FieldHelp>
                    </Field>
                    <Field>
                        <FieldLabel>Số tháng hiển thị</FieldLabel>
                        <NumericEdit TValue="int" @bind-Value="MonthsToDisplay" Min="1" Max="12" />
                    </Field>
                </Div>

                <Field>
                    <FieldLabel>Loại hiển thị</FieldLabel>
                    <RadioGroup TValue="string"
                                CheckedValue="@AnnualViewType"
                                CheckedValueChanged="@OnAnnualViewTypeChanged">
                        <Radio Value="@("Cong")">Công</Radio>
                        <Radio Value="@("GioVuot")">Giờ vượt</Radio>
                        <Radio Value="@("NgayNghi")">Ngày nghỉ</Radio>
                        <Radio Value="@("NgayLe")">Ngày lễ</Radio>
                    </RadioGroup>
                </Field>
            }
        </Div>
    </CardBody>
</Card>

<div class="row mt-3">
    <!-- Left: Calendar view -->
    <div class="col-md-10 col-12">
        <Card>
            <CardHeader>Lịch</CardHeader>
            <CardBody>
                <!-- Optional info above calendar -->
                <p class="mb-2"><strong>Employee:</strong> @Employee?.EmpName</p>

                <CalendarContainer DisplayedView="SelectedView" FirstDate="@SelectedDate" TasksList="@ShownTasks.ToArray()">
                    <AnnualView Months="@MonthsToDisplay" TaskClick="ViewDay" />
                    <MonthlyView TaskClick="ViewDay" />
                </CalendarContainer>
            </CardBody>
        </Card>
    </div>

    <!-- Right: Day details -->
    <div class="col-md-2 col-12 mt-2 mt-md-0">
        <Card>
            <CardHeader>Chi tiết</CardHeader>
            <CardBody>
                @if (SelectedDay != null)
                {
                    <div>
                        <p><strong>Ngày:</strong> @SelectedDay.Value.ToString("dd/MM/yyyy")</p>

                        @if (DayClockins.Any())
                        {
                            <div class="d-flex flex-column gap-2">
                                @foreach (var comp in DayClockins)
                                {
                                    <ClockinDayView Component="@comp" />
                                }
                            </div>
                        }
                        else if (DayHolidays.Any())
                        {
                            <ul class="list-unstyled">
                                @foreach (var holiday in DayHolidays)
                                {
                                    <li><strong>@holiday.HolidayName</strong> (@holiday.StartDate:dd/MM/yyyy - @holiday.EndDate:dd/MM/yyyy)</li>
                                }
                            </ul>
                        }
                        else
                        {
                            <p>Không có dữ liệu</p>
                        }
                    </div>
                }
                else
                {
                    <p>Chọn một ngày để xem chi tiết</p>
                }
            </CardBody>
        </Card>
    </div>

</div>


@code {
    private DisplayedView _selectedView = DisplayedView.Annual;
    private DisplayedView SelectedView
    {
        get => _selectedView;
        set
        {
            if (_selectedView == value)
                return;

            _selectedView = value;
            OnSelectedViewChanged(value);
        }
    }

    private List<Tasks> ShownTasks = new();

    private DateTime today = DateTime.Today;
    private DateTime SelectedDate = DateTime.Today;
    private DateTime? SelectedDay;
    private int _monthsToDisplay = 8;
    private int MonthsToDisplay
    {
        get => _monthsToDisplay;
        set
        {
            if (_monthsToDisplay == value)
                return;

            var oldValue = _monthsToDisplay;
            _monthsToDisplay = value;

            OnMonthsToDisplayChanged(oldValue, value);
        }
    }

    private string AnnualViewType = "Cong";


    private void OnMonthsToDisplayChanged(int oldValue, int newValue)
    {
        if (newValue > oldValue)
            LoadMonthlyData();
    }

    private EmployeeDTO? Employee;
    private ClockinDTO? MonthlyClockin;
    private List<HolidayCalendarDTO>? MonthlyHolidays = new();
    private List<ClockinDTO>? AnnualClockins = new();
    private List<HolidayCalendarDTO>? AnnualHolidays = new();
    //private Dictionary<DateTime, DailyDetailDTO> DayData = new();
    //private Dictionary<DateTime, ClockinComponentDto> ComponentData = new();

    [Inject] INotificationService NotificationService { get; set; }


    private bool _initialized;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_initialized)
        {
            _initialized = true;
            var empJson = await JS.InvokeAsync<string>("localStorage.getItem", "employee");
            if (string.IsNullOrWhiteSpace(empJson)) 
            {
                NotificationService.Warning("Không thể tìm thấy thông tin nhân viên!", "Lỗi");
                return;
            };

            Employee = JsonSerializer.Deserialize<EmployeeDTO>(empJson);
            StateHasChanged();
        }
    }

    Task OnAnnualViewTypeChanged(string value)
    {
        AnnualViewType = value;

        SetAnnualData();

        return Task.CompletedTask;
    }

    private async Task OnMonthlyDateChanged(DateTime? value)
    {
        var newDate = value ?? DateTime.Today;
        var normalized = new DateTime(newDate.Year, newDate.Month, 1);

        bool monthChanged = 
             SelectedDate.Month != normalized.Month
            || SelectedDate.Year != normalized.Year;

        SelectedDate = normalized;


        if (monthChanged)
            await LoadMonthlyData();
    }

    private async Task OnAnnualDateChanged(DateTime? value)
    {
        var newDate = value ?? DateTime.Today;
        var normalized = new DateTime(newDate.Year, newDate.Month, newDate.Day);

        bool monthChanged =
             SelectedDate.Month != normalized.Month
            || SelectedDate.Year != normalized.Year;

        SelectedDate = normalized;

        if (monthChanged)
            await LoadAnnualData();
    }

    private void OnSelectedViewChanged(DisplayedView newValue)
    {
        if (newValue == DisplayedView.Annual)
        {
            SetAnnualData(); // refresh tasks using current AnnualViewType
        }
    }

    private async Task LoadMonthlyData()
    {
        if (Employee == null)
        {
            NotificationService.Warning("Không tìm thấy thông tin nhân viên!", "Lỗi");
            return;
        };

        var client = HttpFactory.CreateClient("ApiClient");

        // 1) Clockins
        var response = await client.GetFromJsonAsync<ClockinDTO>($"api/clockin/employee?empId={Employee.EmpId}&month={SelectedDate.Month}&year={SelectedDate.Year}");
        if (response == null)
        {
            NotificationService.Warning("Không tìm thấy thông tin chấm công của nhân viên!", "Lỗi");
            return;
        }

        MonthlyClockin = response;

        ShownTasks.Clear();
        int id = 1;

        var monthStart = new DateTime(SelectedDate.Year, SelectedDate.Month, 1);
        var monthEnd = monthStart.AddMonths(1).AddDays(-1);

        var holidays = await client.GetFromJsonAsync<IEnumerable<HolidayCalendarDTO>>(
            $"/api/holidaycalendar/employee/{Employee.EmpId}/range?start={monthStart:O}&end={monthEnd:O}");

        MonthlyHolidays = holidays?.ToList() ?? new List<HolidayCalendarDTO>();

        //NotificationService.Warning($"check record count {MonthlyClockin.DailyRecords[0].}", "Debug");

        // foreach (var record in MonthlyClockin.DailyRecords)
        // {
        //     if (record.ScheduledHour != null)
        //     {
        //         bool isFull = (record.ActualHour ?? 0m) >= (record.ScheduledHour ?? 0m);
        //         string color = isFull ? "#90EE90" : "#FFB6C1";

        //         ShownTasks.Add(new Tasks
        //             {
        //                 ID = id++,
        //                 DateStart = new DateTime(MonthlyClockin.Date.Year, MonthlyClockin.Date.Month, record.Day),
        //                 DateEnd = new DateTime(MonthlyClockin.Date.Year, MonthlyClockin.Date.Month, record.Day),
        //                 Code = $"Giờ làm: {(record.ActualHour ?? 0m):F2}/{(record.ScheduledHour ?? 0m):F2}",
        //                 Caption = "Lorem ipsum dolor sit amet",
        //                 Color = color,
        //             });
        //     }
        // }

        SetMonthlyData();
    }

    private async Task LoadAnnualData()
    {
        if (Employee == null)
        {
            NotificationService.Warning("Không tìm thấy thông tin nhân viên!", "Lỗi");
            return;
        };

        var client = HttpFactory.CreateClient("ApiClient");

        // 1. Get clockins
        var response = await client.GetFromJsonAsync<IEnumerable<ClockinDTO>>($"/api/clockin/employee/period?employeeId={Employee.EmpId}&startDate={SelectedDate}&months={MonthsToDisplay}");

        if (response == null)
        {
            NotificationService.Warning("Không tìm thấy thông tin chấm công của nhân viên!", "Lỗi");
            return;
        }
        AnnualClockins = response.ToList();

        // 2. Get holidays
        var endDate = SelectedDate.AddMonths(MonthsToDisplay);
        var response2 = await client.GetFromJsonAsync<IEnumerable<HolidayCalendarDTO>>(
            $"/api/holidaycalendar/employee/{Employee.EmpId}/range?start={SelectedDate:O}&end={endDate:O}");

        if (response2 == null)
        {
            NotificationService.Warning("Không tìm thấy lịch nghỉ của nhân viên!", "Lỗi");
            return;
        }
        AnnualHolidays = response2.ToList();

        SetAnnualData();
    }

    private async Task SetAnnualData()
    {
        ShownTasks.Clear();
        int id = 1;

        switch (AnnualViewType)
        {
            case "Cong":
                if (AnnualClockins != null)
                    foreach (var clockin in AnnualClockins)
                    {
                        foreach (var record in clockin.DailyRecords)
                        {
                            if (record.ScheduledHour != null)
                            {
                                bool isFull = (record.ActualHour ?? 0m) >= (record.ScheduledHour ?? 0m);
                                string color = isFull ? "#90EE90" : "#FFB6C1";

                                ShownTasks.Add(new Tasks
                                {
                                    ID = id++,
                                    DateStart = new DateTime(clockin.Date.Year, clockin.Date.Month, record.Day),
                                    DateEnd = new DateTime(clockin.Date.Year, clockin.Date.Month, record.Day),
                                    Code = $"Giờ làm: {(record.ActualHour ?? 0m):F2}/{(record.ScheduledHour ?? 0m):F2}",
                                    Caption = "Lorem ipsum dolor sit amet",
                                    Color = color,
                                });
                            }
                        }
                    }
                break;

            case "GioVuot":

                break;

            case "NgayNghi":

                break;

            case "NgayLe":
                if (AnnualHolidays != null)
                    foreach (var holiday in AnnualHolidays)
                    {
                        if (holiday.DepartmentHolidays.Count == 0) continue;

                        var depholiday = holiday.DepartmentHolidays[0];
                        ShownTasks.Add(new Tasks
                            {
                                ID = id++,
                                DateStart = new DateTime(depholiday.StartDate.Year, depholiday.StartDate.Month, depholiday.StartDate.Day),
                                DateEnd = new DateTime(depholiday.EndDate.Year, depholiday.EndDate.Month, depholiday.EndDate.Day),
                                Code = $"Nghỉ lễ: {depholiday.HolidayName}",
                                Caption = "Lorem ipsum dolor sit amet",
                                Color = "lightblue"
                            });
                    }

                break;
        }

        await InvokeAsync(StateHasChanged);
    }

    private List<ClockinComponentDto> DayClockins = new();
    private List<DepartmentHolidayCalendarDTO> DayHolidays = new();

    private async Task ViewDay(ClickTaskParameter taskParams)
    {
        SelectedDay = taskParams.Day;

        DayClockins.Clear();
        DayHolidays.Clear();

        if (SelectedView == DisplayedView.Monthly)
        {
            LoadDayMonthly();
        }
        else if (SelectedView == DisplayedView.Annual)
        {
            LoadDayAnnual();
        }

        await InvokeAsync(StateHasChanged);
    }

    private void LoadDayMonthly()
    {
        if (MonthlyClockin == null || SelectedDay == null) return;

        DayClockins = MonthlyClockin.Components
            .Where(c => c.Date.HasValue && c.Date.Value.Date == SelectedDay.Value.Date)
            .Take(3)
            .ToList();
    }

    private void LoadDayAnnual()
    {
        if (SelectedDay == null) return;

        // Cong + GioVuot: use clockins
        if (AnnualViewType == "Cong" || AnnualViewType == "GioVuot")
        {
            if (AnnualClockins == null) return;

            DayClockins = AnnualClockins
                .SelectMany(c => c.Components)
                .Where(c => c.Date.HasValue && c.Date.Value.Date == SelectedDay.Value.Date)
                .Take(3)
                .ToList();
        }

        // NgayLe + NgayNghi: use holidays
        if ((AnnualViewType == "NgayLe" || AnnualViewType == "NgayNghi") && AnnualHolidays != null)
        {
            DayHolidays = AnnualHolidays
                .SelectMany(h => h.DepartmentHolidays)
                .Where(dh => dh.StartDate.Date <= SelectedDay.Value.Date &&
                             dh.EndDate.Date >= SelectedDay.Value.Date)
                .ToList();
        }
    }

    private bool _showCongMonthly = true;
    private bool ShowCongMonthly
    {
        get => _showCongMonthly;
        set
        {
            _showCongMonthly = value;
            SetMonthlyData();
        }
    }

    private bool _showGioVuotMonthly;
    private bool ShowGioVuotMonthly
    {
        get => _showGioVuotMonthly;
        set
        {
            _showGioVuotMonthly = value;
            SetMonthlyData();
        }
    }

    private bool _showNgayLeMonthly;
    private bool ShowNgayLeMonthly
    {
        get => _showNgayLeMonthly;
        set
        {
            _showNgayLeMonthly = value;
            SetMonthlyData();
        }
    }

    private bool _showNgayNghiMonthly;
    private bool ShowNgayNghiMonthly
    {
        get => _showNgayNghiMonthly;
        set
        {
            _showNgayNghiMonthly = value;
            SetMonthlyData();
        }
    }

    private void SetMonthlyData()
    {
        if (MonthlyClockin == null) return;

        ShownTasks.Clear();
        int id = 1;

        // Công (work hours)
        if (ShowCongMonthly)
        {
            foreach (var r in MonthlyClockin.DailyRecords.Where(r => r.ScheduledHour != null))
            {
                bool isFull = (r.ActualHour ?? 0m) >= (r.ScheduledHour ?? 0m);
                ShownTasks.Add(new Tasks
                    {
                        ID = id++,
                        DateStart = new DateTime(MonthlyClockin.Date.Year, MonthlyClockin.Date.Month, r.Day),
                        DateEnd = new DateTime(MonthlyClockin.Date.Year, MonthlyClockin.Date.Month, r.Day),
                        Code = $"Giờ làm: {(r.ActualHour ?? 0m):F2}/{(r.ScheduledHour ?? 0m):F2}",
                        Caption = "",
                        Color = isFull ? "#90EE90" : "#FFB6C1"
                    });
            }
        }

        if (ShowNgayLeMonthly && MonthlyHolidays != null)
            foreach (var holiday in MonthlyHolidays)
            {
                if (holiday.DepartmentHolidays.Count == 0) continue;

                var depholiday = holiday.DepartmentHolidays[0];
                ShownTasks.Add(new Tasks
                    {
                        ID = id++,
                        DateStart = new DateTime(depholiday.StartDate.Year, depholiday.StartDate.Month, depholiday.StartDate.Day),
                        DateEnd = new DateTime(depholiday.EndDate.Year, depholiday.EndDate.Month, depholiday.EndDate.Day),
                        Code = $"Nghỉ lễ: {depholiday.HolidayName}",
                        Caption = "Lorem ipsum dolor sit amet",
                        Color = "lightblue"
                    });
            }

        // Giờ vượt, Ngày nghỉ, Ngày lễ:
        // add your own projections here based on your DTOs when available
        // if (ShowGioVuotMonthly) { ... }
        // if (ShowNgayNghiMonthly) { ... }
    }
}