@page "/xlsupload"
@using System.Net.Http.Json
@using AttendanceManagementPayrollSystem.DTO
@using AttendanceManagementPayrollSystem.Models
@inject IHttpClientFactory ClientFactory

<h3>Upload XLS</h3>

<InputFile OnChange="UploadFile" accept=".xls" />

@if (!string.IsNullOrEmpty(Status))
{
    <p>@Status</p>
}

@if (Clockins != null && Clockins.Any())
{
    <div class="d-flex justify-content-end mb-2">
        <button class="btn btn-primary btn-sm" @onclick="Generate">Generate</button>
    </div>

    <h4>Processed Clockins</h4>

    <table class="table table-sm table-bordered">
        <thead>
            <tr>
                <th></th>
                <th>EmpId</th>
                <th>Date</th>
                <th>WorkUnits</th>
                <th>Scheduled</th>
                <th>ClockLog</th>
                <th>Work Breakdown</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var c in Clockins)
            {
                var isExpanded = expandedRows.Contains(c.EmpId);

                <tr>
                    <td>
                        <button class="btn btn-sm btn-link" @onclick="() => ToggleRow(c.EmpId)">
                            @(isExpanded ? "−" : "+")
                        </button>
                    </td>
                    <td>@c.EmpId</td>
                    <td>@c.Date.ToString("yyyy-MM-dd")</td>
                    <td>@c.WorkUnits</td>
                    <td>@c.ScheduledUnits</td>
                    <td>@c.ClockLog</td>
                    <td>@c.WorkUnitBreakdown</td>
                </tr>

                @if (isExpanded && c.DailyRecords != null && c.DailyRecords.Any())
                {
                    <tr>
                        <td></td>
                        <td colspan="6">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Day</th>
                                        <th>Logs</th>
                                        <th>Actual</th>
                                        <th>Scheduled</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var d in c.DailyRecords)
                                    {
                                        <tr>
                                            <td>@d.Day</td>
                                            <td>@string.Join(", ", d.Logs)</td>
                                            <td>@(d.ActualUnit ?? 0m).ToString("F2")</td>
                                            <td>@(d.ScheduledUnit ?? 0m).ToString("F2")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}


@code {
    private string Status = "";
    private List<ClockinDTO>? Clockins;

    const int MAX_FILESIZE = 5_000 * 1024;

    public async Task UploadFile(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null) return;

        try
        {
            using var mem = new MemoryStream();
            using var stream = file.OpenReadStream(MAX_FILESIZE);
            await stream.CopyToAsync(mem);
            mem.Position = 0;

            using var client = ClientFactory.CreateClient("ApiClient");
            using var content = new StreamContent(mem);
            content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/vnd.ms-excel");

            var response = await client.PostAsync("api/clockin/uploadxls", content);

            if (response.IsSuccessStatusCode)
            {
                Clockins = await response.Content.ReadFromJsonAsync<List<ClockinDTO>>();
                Status = "File processed successfully";
            }
            else
            {
                Status = $"Upload failed: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            Status = ex.Message;
        }
    }

    private HashSet<int> expandedRows = new();

    private void ToggleRow(int empId)
    {
        if (expandedRows.Contains(empId))
            expandedRows.Remove(empId);
        else
            expandedRows.Add(empId);
    }

    private async Task Generate()
    {
        if (Clockins == null || !Clockins.Any())
        {
            Status = "No clock-in data to upload.";
            return;
        }

        try
        {
            using var client = ClientFactory.CreateClient("ApiClient");
            var response = await client.PostAsJsonAsync("api/clockin/upload-clockin", Clockins);

            if (response.IsSuccessStatusCode)
                Status = "Clock-ins uploaded successfully.";
            else
                Status = $"Failed: {response.ReasonPhrase}";
        }
        catch (Exception ex)
        {
            Status = $"Error: {ex.Message}";
        }
    }
}
