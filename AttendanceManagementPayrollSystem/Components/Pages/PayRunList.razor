@page "/payruns"
@using AttendanceManagementPayrollSystem.DTO
@using System.Text.Json
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject IHttpClientFactory HttpFactory

<h3>Pay Runs</h3>
@if (PayRuns == null)
{
    <p>Loading...</p>
}
else
{
    <div class="d-flex justify-content-between align-items-center mb-2">
        <h5>Pay Runs</h5>

        @if (canCreatePayRun)
        {
            <button class="btn btn-primary" @onclick="NavigateGenerate">New Pay Run</button>
        }
    </div>

    @if (PayRuns.Count == 0)
    {
        <p>No pay runs found.</p>
    }
    else
    {
        <div class="list-group">
            @foreach (var run in PayRuns.OrderByDescending(r => r.CreatedDate))
            {
                <button class="list-group-item list-group-item-action"
                        @onclick="() => GoToPayRun(run.PayrollRunId)">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <strong>@run.Name</strong><br />
                            <small>@($"{run.PeriodMonth}/{run.PeriodYear}")</small>
                        </div>
                        <span class="badge bg-secondary">@run.Status</span>
                    </div>
                </button>
            }
        </div>
    }
}


@code {
    private bool canCreatePayRun = false;
    private List<PayRunBasicDto> PayRuns = new();


    protected override async Task OnInitializedAsync()
    {

        var client = HttpFactory.CreateClient("ApiClient");

        var runs = await client.GetFromJsonAsync<IEnumerable<PayRunBasicDto>>("api/pay-run");

        if (runs != null) PayRuns = runs.ToList();
    }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        try
        {
            var empJson = await JS.InvokeAsync<string>("localStorage.getItem", "employee");

            if (!string.IsNullOrWhiteSpace(empJson))
            {
                EmployeeDTO emp = JsonSerializer.Deserialize<EmployeeDTO>(empJson);
                if (emp != null && emp.Permissions.Contains("generate_payroll_run"))
                {
                    canCreatePayRun = true;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private void GoToPayRun(int id)
    {
        Navigation.NavigateTo($"/payruns/{id}");
    }

    private void NavigateGenerate()
    {
        Navigation.NavigateTo("/payruns/generate");
    }
}
