{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MinhooMinh\\\\Downloads\\\\SWP\\\\AttendanceManagementPayrollSystem\\\\ClientApp\\\\src\\\\pages\\\\MyKpiPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport KpiTable from \"../components/KpiTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MyKpiPage({\n  empId\n}) {\n  _s();\n  const [kpiData, setKpiData] = useState(null);\n  const [phase, setPhase] = useState(\"SelfScore\"); // Employee can only self-score\n  const role = \"Employee\"; // Fixed role\n\n  useEffect(() => {\n    async function fetchKpi() {\n      try {\n        var _data$kpis$$values, _data$kpis;\n        setLoading(true);\n        const res = await fetch(`http://localhost:5038/api/kpi/9`);\n        if (!res.ok) throw new Error(`Failed to fetch: ${res.statusText}`);\n        const data = await res.json();\n\n        // unwrap $values for kpis and components\n        const kpisArray = (_data$kpis$$values = (_data$kpis = data.kpis) === null || _data$kpis === void 0 ? void 0 : _data$kpis.$values) !== null && _data$kpis$$values !== void 0 ? _data$kpis$$values : [];\n        const kpis = kpisArray.map(k => {\n          var _k$components$$values, _k$components;\n          return {\n            ...k,\n            components: (_k$components$$values = (_k$components = k.components) === null || _k$components === void 0 ? void 0 : _k$components.$values) !== null && _k$components$$values !== void 0 ? _k$components$$values : []\n          };\n        });\n        setKpiData({\n          ...data,\n          kpis\n        });\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n    if (empId) fetchKpi();\n  }, [empId]);\n  const handleKpiChange = (compId, field, value) => {\n    setKpiData(prev => {\n      const newKpi = {\n        ...prev\n      };\n      const comp = newKpi.kpis[0].components.find(c => c.kpiComponentId === compId);\n      if (comp) comp[field] = value;\n      return newKpi;\n    });\n  };\n  const handleSave = async () => {\n    try {\n      await fetch(`/api/kpi/${empId}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(kpiData)\n      });\n      alert(\"KPI saved successfully\");\n    } catch (err) {\n      console.error(err);\n      alert(\"Failed to save KPI\");\n    }\n  };\n  if (!kpiData) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading your KPI...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 26\n  }, this);\n\n  // Assuming only 1 KPI per month\n  const currentKpi = kpiData.kpis[0];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-bold mb-4\",\n      children: \"My KPI Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(KpiTable, {\n      kpi: currentKpi,\n      role: role,\n      phase: phase,\n      onChange: handleKpiChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSave,\n      className: \"mt-4 px-4 py-2 bg-blue-500 text-white rounded\",\n      children: \"Save Self Score\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n}\n_s(MyKpiPage, \"28lBWoDFc38T+Bt60hVjntAFZrY=\");\n_c = MyKpiPage;\nvar _c;\n$RefreshReg$(_c, \"MyKpiPage\");","map":{"version":3,"names":["React","useState","useEffect","KpiTable","jsxDEV","_jsxDEV","MyKpiPage","empId","_s","kpiData","setKpiData","phase","setPhase","role","fetchKpi","_data$kpis$$values","_data$kpis","setLoading","res","fetch","ok","Error","statusText","data","json","kpisArray","kpis","$values","map","k","_k$components$$values","_k$components","components","err","setError","message","handleKpiChange","compId","field","value","prev","newKpi","comp","find","c","kpiComponentId","handleSave","method","headers","body","JSON","stringify","alert","console","error","children","fileName","_jsxFileName","lineNumber","columnNumber","currentKpi","className","kpi","onChange","onClick","_c","$RefreshReg$"],"sources":["C:/Users/MinhooMinh/Downloads/SWP/AttendanceManagementPayrollSystem/ClientApp/src/pages/MyKpiPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport KpiTable from \"../components/KpiTable\";\n\nexport default function MyKpiPage({ empId }) { \n    const [kpiData, setKpiData] = useState(null);\n    const [phase, setPhase] = useState(\"SelfScore\"); // Employee can only self-score\n    const role = \"Employee\"; // Fixed role\n\n\n    useEffect(() => {\n    async function fetchKpi() {\n        try {\n            setLoading(true);\n            const res = await fetch(`http://localhost:5038/api/kpi/9`);\n            if (!res.ok) throw new Error(`Failed to fetch: ${res.statusText}`);\n            const data = await res.json();\n\n            // unwrap $values for kpis and components\n            const kpisArray = data.kpis?.$values ?? [];\n            const kpis = kpisArray.map((k) => ({\n                ...k,\n                components: k.components?.$values ?? [],\n            }));\n\n            setKpiData({ ...data, kpis });\n            } catch (err) {\n                setError(err.message);\n            } finally {\n                setLoading(false);\n            }\n        } if (empId) fetchKpi();\n    }, [empId]);\n\n    const handleKpiChange = (compId, field, value) => {\n        setKpiData((prev) => {\n            const newKpi = { ...prev };\n            const comp = newKpi.kpis[0].components.find(\n                (c) => c.kpiComponentId === compId\n            );\n            if (comp) comp[field] = value;\n            return newKpi;\n        });\n    };\n\n    const handleSave = async () => {\n        try {\n            await fetch(`/api/kpi/${empId}`, {\n                method: \"PUT\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify(kpiData),\n            });\n            alert(\"KPI saved successfully\");\n        } catch (err) {\n            console.error(err);\n            alert(\"Failed to save KPI\");\n        }\n    };\n\n    if (!kpiData) return <div>Loading your KPI...</div>;\n\n    // Assuming only 1 KPI per month\n    const currentKpi = kpiData.kpis[0];\n\n\n\n    return (\n        <div className=\"p-4\">\n            <h2 className=\"text-xl font-bold mb-4\">My KPI Dashboard</h2>\n\n            <KpiTable\n                kpi={currentKpi}\n                role={role}\n                phase={phase}\n                onChange={handleKpiChange}\n            />\n\n            <button\n                onClick={handleSave}\n                className=\"mt-4 px-4 py-2 bg-blue-500 text-white rounded\"\n            >\n                Save Self Score\n            </button>\n        </div>\n    );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,eAAe,SAASC,SAASA,CAAC;EAAEC;AAAM,CAAC,EAAE;EAAAC,EAAA;EACzC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC;EACjD,MAAMY,IAAI,GAAG,UAAU,CAAC,CAAC;;EAGzBX,SAAS,CAAC,MAAM;IAChB,eAAeY,QAAQA,CAAA,EAAG;MACtB,IAAI;QAAA,IAAAC,kBAAA,EAAAC,UAAA;QACAC,UAAU,CAAC,IAAI,CAAC;QAChB,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,iCAAiC,CAAC;QAC1D,IAAI,CAACD,GAAG,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,oBAAoBH,GAAG,CAACI,UAAU,EAAE,CAAC;QAClE,MAAMC,IAAI,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,CAAC;;QAE7B;QACA,MAAMC,SAAS,IAAAV,kBAAA,IAAAC,UAAA,GAAGO,IAAI,CAACG,IAAI,cAAAV,UAAA,uBAATA,UAAA,CAAWW,OAAO,cAAAZ,kBAAA,cAAAA,kBAAA,GAAI,EAAE;QAC1C,MAAMW,IAAI,GAAGD,SAAS,CAACG,GAAG,CAAEC,CAAC;UAAA,IAAAC,qBAAA,EAAAC,aAAA;UAAA,OAAM;YAC/B,GAAGF,CAAC;YACJG,UAAU,GAAAF,qBAAA,IAAAC,aAAA,GAAEF,CAAC,CAACG,UAAU,cAAAD,aAAA,uBAAZA,aAAA,CAAcJ,OAAO,cAAAG,qBAAA,cAAAA,qBAAA,GAAI;UACzC,CAAC;QAAA,CAAC,CAAC;QAEHpB,UAAU,CAAC;UAAE,GAAGa,IAAI;UAAEG;QAAK,CAAC,CAAC;MAC7B,CAAC,CAAC,OAAOO,GAAG,EAAE;QACVC,QAAQ,CAACD,GAAG,CAACE,OAAO,CAAC;MACzB,CAAC,SAAS;QACNlB,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ;IAAE,IAAIV,KAAK,EAAEO,QAAQ,CAAC,CAAC;EAC3B,CAAC,EAAE,CAACP,KAAK,CAAC,CAAC;EAEX,MAAM6B,eAAe,GAAGA,CAACC,MAAM,EAAEC,KAAK,EAAEC,KAAK,KAAK;IAC9C7B,UAAU,CAAE8B,IAAI,IAAK;MACjB,MAAMC,MAAM,GAAG;QAAE,GAAGD;MAAK,CAAC;MAC1B,MAAME,IAAI,GAAGD,MAAM,CAACf,IAAI,CAAC,CAAC,CAAC,CAACM,UAAU,CAACW,IAAI,CACtCC,CAAC,IAAKA,CAAC,CAACC,cAAc,KAAKR,MAChC,CAAC;MACD,IAAIK,IAAI,EAAEA,IAAI,CAACJ,KAAK,CAAC,GAAGC,KAAK;MAC7B,OAAOE,MAAM;IACjB,CAAC,CAAC;EACN,CAAC;EAED,MAAMK,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC3B,IAAI;MACA,MAAM3B,KAAK,CAAC,YAAYZ,KAAK,EAAE,EAAE;QAC7BwC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC1C,OAAO;MAChC,CAAC,CAAC;MACF2C,KAAK,CAAC,wBAAwB,CAAC;IACnC,CAAC,CAAC,OAAOnB,GAAG,EAAE;MACVoB,OAAO,CAACC,KAAK,CAACrB,GAAG,CAAC;MAClBmB,KAAK,CAAC,oBAAoB,CAAC;IAC/B;EACJ,CAAC;EAED,IAAI,CAAC3C,OAAO,EAAE,oBAAOJ,OAAA;IAAAkD,QAAA,EAAK;EAAmB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;;EAEnD;EACA,MAAMC,UAAU,GAAGnD,OAAO,CAACiB,IAAI,CAAC,CAAC,CAAC;EAIlC,oBACIrB,OAAA;IAAKwD,SAAS,EAAC,KAAK;IAAAN,QAAA,gBAChBlD,OAAA;MAAIwD,SAAS,EAAC,wBAAwB;MAAAN,QAAA,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAE5DtD,OAAA,CAACF,QAAQ;MACL2D,GAAG,EAAEF,UAAW;MAChB/C,IAAI,EAAEA,IAAK;MACXF,KAAK,EAAEA,KAAM;MACboD,QAAQ,EAAE3B;IAAgB;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B,CAAC,eAEFtD,OAAA;MACI2D,OAAO,EAAElB,UAAW;MACpBe,SAAS,EAAC,+CAA+C;MAAAN,QAAA,EAC5D;IAED;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEd;AAACnD,EAAA,CAjFuBF,SAAS;AAAA2D,EAAA,GAAT3D,SAAS;AAAA,IAAA2D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}