// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace AttendanceManagementPayrollSystem.Models;

public partial class AttendanceManagementPayrollSystemContext : DbContext
{
    public AttendanceManagementPayrollSystemContext(DbContextOptions<AttendanceManagementPayrollSystemContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AllowanceType> AllowanceTypes { get; set; }

    public virtual DbSet<Clockin> Clockins { get; set; }

    public virtual DbSet<DailyShift> DailyShifts { get; set; }

    public virtual DbSet<Department> Departments { get; set; }

    public virtual DbSet<DepartmentWeeklyShift> DepartmentWeeklyShifts { get; set; }

    public virtual DbSet<Employee> Employees { get; set; }

    public virtual DbSet<EmployeeAllowance> EmployeeAllowances { get; set; }

    public virtual DbSet<EmployeeDependent> EmployeeDependents { get; set; }

    public virtual DbSet<EmployeePermission> EmployeePermissions { get; set; }

    public virtual DbSet<EmployeeSalaryPreview> EmployeeSalaryPreviews { get; set; }

    public virtual DbSet<EmployeeSalarySlip> EmployeeSalarySlips { get; set; }

    public virtual DbSet<HolidayCalendar> HolidayCalendars { get; set; }

    public virtual DbSet<InsuranceRateSet> InsuranceRateSets { get; set; }

    public virtual DbSet<Kpi> Kpis { get; set; }

    public virtual DbSet<Kpicomponent> Kpicomponents { get; set; }

    public virtual DbSet<LeaveRequest> LeaveRequests { get; set; }

    public virtual DbSet<LeaveType> LeaveTypes { get; set; }

    public virtual DbSet<OvertimeRate> OvertimeRates { get; set; }

    public virtual DbSet<OvertimeRequest> OvertimeRequests { get; set; }

    public virtual DbSet<PayrollRun> PayrollRuns { get; set; }

    public virtual DbSet<Permission> Permissions { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<RolePermission> RolePermissions { get; set; }

    public virtual DbSet<SalaryPolicy> SalaryPolicies { get; set; }

    public virtual DbSet<TaxBracket> TaxBrackets { get; set; }

    public virtual DbSet<WeeklyShift> WeeklyShifts { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AllowanceType>(entity =>
        {
            entity.HasKey(e => e.TypeId).HasName("PK__Allowanc__2C0005980EE0433C");

            entity.ToTable("AllowanceType");

            entity.Property(e => e.TypeId).HasColumnName("type_id");
            entity.Property(e => e.CalculationType)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("calculation_type");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.EffectiveStartDate).HasColumnName("effective_start_date");
            entity.Property(e => e.TypeName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("type_name");
            entity.Property(e => e.Value)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("value");
        });

        modelBuilder.Entity<Clockin>(entity =>
        {
            entity.HasKey(e => new { e.EmpId, e.Date });

            entity.ToTable("Clockin");

            entity.Property(e => e.EmpId).HasColumnName("emp_id");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.CloId)
                .ValueGeneratedOnAdd()
                .HasColumnName("clo_id");
            entity.Property(e => e.ClockLog).HasMaxLength(200);
            entity.Property(e => e.ScheduledUnits).HasColumnType("decimal(3, 2)");
            entity.Property(e => e.WorkUnitBreakdown).HasMaxLength(200);
            entity.Property(e => e.WorkUnits).HasColumnType("decimal(3, 2)");

            entity.HasOne(d => d.Emp).WithMany(p => p.Clockins)
                .HasForeignKey(d => d.EmpId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Clockin_Employee");
        });

        modelBuilder.Entity<DailyShift>(entity =>
        {
            entity.HasKey(e => e.ShiftIndex).HasName("PK__DailyShi__1BC1E2CF1365459F");

            entity.ToTable("DailyShift");

            entity.Property(e => e.ShiftDescription).HasMaxLength(100);
            entity.Property(e => e.ShiftName).HasMaxLength(100);
            entity.Property(e => e.ShiftString).HasMaxLength(200);
        });

        modelBuilder.Entity<Department>(entity =>
        {
            entity.HasKey(e => e.DepId);

            entity.ToTable("Department");

            entity.Property(e => e.DepId).HasColumnName("dep_id");
            entity.Property(e => e.DepName)
                .HasMaxLength(50)
                .HasColumnName("dep_name");

            entity.HasMany(d => d.Holidays).WithMany(p => p.Deps)
                .UsingEntity<Dictionary<string, object>>(
                    "DepartmentHolidayCalender",
                    r => r.HasOne<HolidayCalendar>().WithMany()
                        .HasForeignKey("HolidayId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_DepartmentHolidayCalender_HolidayCalendar"),
                    l => l.HasOne<Department>().WithMany()
                        .HasForeignKey("DepId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_DepartmentHolidayCalender_Department"),
                    j =>
                    {
                        j.HasKey("DepId", "HolidayId");
                        j.ToTable("DepartmentHolidayCalender");
                        j.IndexerProperty<int>("DepId").HasColumnName("dep_id");
                        j.IndexerProperty<int>("HolidayId").HasColumnName("holiday_id");
                    });
        });

        modelBuilder.Entity<DepartmentWeeklyShift>(entity =>
        {
            entity.HasKey(e => e.DeptShiftId).HasName("PK__Departme__E496BB675B130812");

            entity.ToTable("DepartmentWeeklyShift");

            entity.Property(e => e.DeptShiftId).HasColumnName("dept_shift_id");
            entity.Property(e => e.DepId).HasColumnName("dep_id");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.ShiftId).HasColumnName("shift_id");

            entity.HasOne(d => d.Dep).WithMany(p => p.DepartmentWeeklyShifts)
                .HasForeignKey(d => d.DepId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DepartmentShift_Department");

            entity.HasOne(d => d.Shift).WithMany(p => p.DepartmentWeeklyShifts)
                .HasForeignKey(d => d.ShiftId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DepartmentShift_WeeklyShift");
        });

        modelBuilder.Entity<Employee>(entity =>
        {
            entity.HasKey(e => e.EmpId);

            entity.ToTable("Employee");

            entity.Property(e => e.EmpId).HasColumnName("emp_id");
            entity.Property(e => e.ClockinId).HasColumnName("clockin_id");
            entity.Property(e => e.DepId).HasColumnName("dep_id");
            entity.Property(e => e.EmpDob).HasColumnName("emp_dob");
            entity.Property(e => e.EmpName)
                .HasMaxLength(50)
                .HasColumnName("emp_name");
            entity.Property(e => e.EmpPhoneNumber)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("emp_phone_number");
            entity.Property(e => e.PasswordHash)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("password_hash");
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("username");

            entity.HasOne(d => d.Dep).WithMany(p => p.Employees)
                .HasForeignKey(d => d.DepId)
                .HasConstraintName("FK_Employee_Department");

            entity.HasMany(d => d.Roles).WithMany(p => p.Emps)
                .UsingEntity<Dictionary<string, object>>(
                    "EmployeeRole",
                    r => r.HasOne<Role>().WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__EmployeeR__RoleI__0D7A0286"),
                    l => l.HasOne<Employee>().WithMany()
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__UserRoles__emp_i__681373AD"),
                    j =>
                    {
                        j.HasKey("EmpId", "RoleId").HasName("PK__UserRole__760965CC5651F5D8");
                        j.ToTable("EmployeeRole");
                        j.IndexerProperty<int>("EmpId").HasColumnName("emp_id");
                        j.IndexerProperty<int>("RoleId").HasColumnName("RoleID");
                    });
        });

        modelBuilder.Entity<EmployeeAllowance>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Employee__3213E83FB246632E");

            entity.ToTable("EmployeeAllowance");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CustomValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("custom_value");
            entity.Property(e => e.EmpId).HasColumnName("emp_id");
            entity.Property(e => e.EndDate).HasColumnName("end_date");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.TypeId).HasColumnName("type_id");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.EmployeeAllowanceCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmployeeAllowance_CreatedBy");

            entity.HasOne(d => d.Emp).WithMany(p => p.EmployeeAllowanceEmps)
                .HasForeignKey(d => d.EmpId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmployeeAllowance_Employee");

            entity.HasOne(d => d.Type).WithMany(p => p.EmployeeAllowances)
                .HasForeignKey(d => d.TypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmployeeAllowance_AllowanceType");
        });

        modelBuilder.Entity<EmployeeDependent>(entity =>
        {
            entity.HasKey(e => e.DependentId).HasName("PK__Employee__9BC67C117C53E9F4");

            entity.ToTable("EmployeeDependent");

            entity.Property(e => e.DependentId).HasColumnName("DependentID");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Gender)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NationalId)
                .HasMaxLength(50)
                .HasColumnName("NationalID");
            entity.Property(e => e.Relationship)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Employee).WithMany(p => p.EmployeeDependents)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmployeeDependent_Employee");
        });

        modelBuilder.Entity<EmployeePermission>(entity =>
        {
            entity.HasKey(e => e.UserPermissionId).HasName("PK__Employee__A90F88D264E8D983");

            entity.ToTable("EmployeePermission");

            entity.Property(e => e.UserPermissionId).HasColumnName("UserPermissionID");
            entity.Property(e => e.PermissionId).HasColumnName("PermissionID");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.Permission).WithMany(p => p.EmployeePermissions)
                .HasForeignKey(d => d.PermissionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__EmployeeP__Permi__0A9D95DB");

            entity.HasOne(d => d.User).WithMany(p => p.EmployeePermissions)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__UserPermi__UserI__72910220");
        });

        modelBuilder.Entity<EmployeeSalaryPreview>(entity =>
        {
            entity.HasKey(e => e.PreviewId).HasName("PK__Employee__1BFB3493EAC411DF");

            entity.ToTable("EmployeeSalaryPreview");

            entity.Property(e => e.PreviewId).HasColumnName("preview_id");
            entity.Property(e => e.Allowance)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("allowance");
            entity.Property(e => e.BaseSalary)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("base_salary");
            entity.Property(e => e.Bonus)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("bonus");
            entity.Property(e => e.CreatedAt)
                .HasAnnotation("Relational:DefaultConstraintName", "DF_EmployeeSalaryPreview_created_at")
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.EmpId).HasColumnName("emp_id");
            entity.Property(e => e.GrossSalary)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("gross_salary");
            entity.Property(e => e.HealthInsurance)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("health_insurance");
            entity.Property(e => e.InsuranceRateSetId).HasColumnName("InsuranceRateSetID");
            entity.Property(e => e.NetSalary)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("net_salary");
            entity.Property(e => e.Overtime)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("overtime");
            entity.Property(e => e.PayrollRunId).HasColumnName("payroll_run_id");
            entity.Property(e => e.PersonalIncomeTax)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("personal_income_tax");
            entity.Property(e => e.SocialInsurance)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("social_insurance");
            entity.Property(e => e.TotalDeductions)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("total_deductions");
            entity.Property(e => e.UnemploymentInsurance)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("unemployment_insurance");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.EmployeeSalaryPreviewCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmployeeSalaryPreview_Employee1");

            entity.HasOne(d => d.Emp).WithMany(p => p.EmployeeSalaryPreviewEmps)
                .HasForeignKey(d => d.EmpId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmployeeSalaryPreview_Employee");

            entity.HasOne(d => d.InsuranceRateSet).WithMany(p => p.EmployeeSalaryPreviews)
                .HasForeignKey(d => d.InsuranceRateSetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmployeeSalaryPreview_InsuranceRateSet");

            entity.HasOne(d => d.PayrollRun).WithMany(p => p.EmployeeSalaryPreviews)
                .HasForeignKey(d => d.PayrollRunId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmployeeSalaryPreview_PayrollRun");
        });

        modelBuilder.Entity<EmployeeSalarySlip>(entity =>
        {
            entity.HasKey(e => e.SlipId).HasName("PK__Employee__43C71422CA2C18CE");

            entity.ToTable("EmployeeSalarySlip");

            entity.Property(e => e.SlipId).HasColumnName("slip_id");
            entity.Property(e => e.Allowance)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("allowance");
            entity.Property(e => e.ApprovedAt)
                .HasColumnType("datetime")
                .HasColumnName("approved_at");
            entity.Property(e => e.ApprovedBy).HasColumnName("approved_by");
            entity.Property(e => e.BaseSalary)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("base_salary");
            entity.Property(e => e.Bonus)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("bonus");
            entity.Property(e => e.CreatedAt)
                .HasAnnotation("Relational:DefaultConstraintName", "DF_EmployeeSalarySlip_created_at")
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.EmpId).HasColumnName("emp_id");
            entity.Property(e => e.GrossSalary)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("gross_salary");
            entity.Property(e => e.HealthInsurance)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("health_insurance");
            entity.Property(e => e.InsuranceRateSetId).HasColumnName("InsuranceRateSetID");
            entity.Property(e => e.NetSalary)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("net_salary");
            entity.Property(e => e.Overtime)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("overtime");
            entity.Property(e => e.PayrollRunId).HasColumnName("payroll_run_id");
            entity.Property(e => e.PersonalIncomeTax)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("personal_income_tax");
            entity.Property(e => e.SocialInsurance)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("social_insurance");
            entity.Property(e => e.TotalDeductions)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("total_deductions");
            entity.Property(e => e.UnemploymentInsurance)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("unemployment_insurance");

            entity.HasOne(d => d.ApprovedByNavigation).WithMany(p => p.EmployeeSalarySlipApprovedByNavigations)
                .HasForeignKey(d => d.ApprovedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmployeeSalarySlip_Employee");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.EmployeeSalarySlipCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmployeeSalarySlip_Employee1");

            entity.HasOne(d => d.Emp).WithMany(p => p.EmployeeSalarySlipEmps)
                .HasForeignKey(d => d.EmpId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__EmployeeS__emp_i__540C7B00");

            entity.HasOne(d => d.InsuranceRateSet).WithMany(p => p.EmployeeSalarySlips)
                .HasForeignKey(d => d.InsuranceRateSetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmployeeSalarySlip_InsuranceRateSet");
        });

        modelBuilder.Entity<HolidayCalendar>(entity =>
        {
            entity.HasKey(e => e.HolidayId).HasName("PK__HolidayC__253884EAE88B1183");

            entity.ToTable("HolidayCalendar");

            entity.Property(e => e.HolidayId).HasColumnName("holiday_id");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.EndDatetime)
                .HasColumnType("datetime")
                .HasColumnName("end_datetime");
            entity.Property(e => e.HolidayName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("holiday_name");
            entity.Property(e => e.StartDatetime)
                .HasColumnType("datetime")
                .HasColumnName("start_datetime");
        });

        modelBuilder.Entity<InsuranceRateSet>(entity =>
        {
            entity.HasKey(e => e.InsuranceRateSetId).HasName("PK__Insuranc__4E8CF9F66B2AD402");

            entity.ToTable("InsuranceRateSet");

            entity.Property(e => e.InsuranceRateSetId).HasColumnName("InsuranceRateSetID");
            entity.Property(e => e.HealthEmployeeRate)
                .HasColumnType("decimal(5, 4)")
                .HasColumnName("Health_EmployeeRate");
            entity.Property(e => e.HealthEmployerRate)
                .HasColumnType("decimal(5, 4)")
                .HasColumnName("Health_EmployerRate");
            entity.Property(e => e.SiHiCapRule)
                .HasMaxLength(50)
                .HasColumnName("SI_HI_CapRule");
            entity.Property(e => e.SocialEmployeeRate)
                .HasColumnType("decimal(5, 4)")
                .HasColumnName("Social_EmployeeRate");
            entity.Property(e => e.SocialEmployerRate)
                .HasColumnType("decimal(5, 4)")
                .HasColumnName("Social_EmployerRate");
            entity.Property(e => e.UiCapRule)
                .HasMaxLength(50)
                .HasColumnName("UI_CapRule");
            entity.Property(e => e.UiEmployeeRate)
                .HasColumnType("decimal(5, 4)")
                .HasColumnName("UI_EmployeeRate");
            entity.Property(e => e.UiEmployerRate)
                .HasColumnType("decimal(5, 4)")
                .HasColumnName("UI_EmployerRate");
        });

        modelBuilder.Entity<Kpi>(entity =>
        {
            entity.ToTable("KPI");

            entity.Property(e => e.KpiId).HasColumnName("kpi_id");
            entity.Property(e => e.AssignedAt)
                .HasAnnotation("Relational:DefaultConstraintName", "DF_KPI_assigned_at")
                .HasColumnType("datetime")
                .HasColumnName("assigned_at");
            entity.Property(e => e.AssignedBy).HasColumnName("assigned_by");
            entity.Property(e => e.EmpId).HasColumnName("emp_id");
            entity.Property(e => e.KpiRate).HasColumnName("kpi_rate");
            entity.Property(e => e.PeriodMonth).HasColumnName("period_month");
            entity.Property(e => e.PeriodYear).HasColumnName("period_year");
            entity.Property(e => e.Prorate)
                .HasAnnotation("Relational:DefaultConstraintName", "DF_KPI_prorate")
                .HasColumnName("prorate");

            entity.HasOne(d => d.AssignedByNavigation).WithMany(p => p.KpiAssignedByNavigations)
                .HasForeignKey(d => d.AssignedBy)
                .HasConstraintName("FK_KPI_Employee1");

            entity.HasOne(d => d.Emp).WithMany(p => p.KpiEmps)
                .HasForeignKey(d => d.EmpId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_KPI_Employee");
        });

        modelBuilder.Entity<Kpicomponent>(entity =>
        {
            entity.HasKey(e => e.KpiCompId).HasName("PK_Table_1");

            entity.ToTable("KPIComponent");

            entity.Property(e => e.KpiCompId).HasColumnName("kpi_comp_id");
            entity.Property(e => e.AchievedValue).HasColumnName("achieved_value");
            entity.Property(e => e.AssignedScore)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("assigned_score");
            entity.Property(e => e.AssignerComment)
                .HasMaxLength(100)
                .HasColumnName("assigner_comment");
            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .HasColumnName("description");
            entity.Property(e => e.KpiId).HasColumnName("kpi_id");
            entity.Property(e => e.Name)
                .HasMaxLength(30)
                .HasColumnName("name");
            entity.Property(e => e.SelfComment)
                .HasMaxLength(100)
                .HasColumnName("self_comment");
            entity.Property(e => e.SelfScore)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("self_score");
            entity.Property(e => e.TargetValue).HasColumnName("target_value");
            entity.Property(e => e.Weight).HasColumnName("weight");

            entity.HasOne(d => d.Kpi).WithMany(p => p.Kpicomponents)
                .HasForeignKey(d => d.KpiId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Table_1_KPI");
        });

        modelBuilder.Entity<LeaveRequest>(entity =>
        {
            entity.HasKey(e => e.ReqId).HasName("PK__LeaveReq__1513A6FB7B28EF3A");

            entity.ToTable("LeaveRequest");

            entity.Property(e => e.ReqId).HasColumnName("req_id");
            entity.Property(e => e.ApprovedBy).HasColumnName("approved_by");
            entity.Property(e => e.ApprovedDate).HasColumnName("approved_date");
            entity.Property(e => e.EmpId).HasColumnName("emp_id");
            entity.Property(e => e.EndDate).HasColumnName("end_date");
            entity.Property(e => e.NumbersOfDays)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("numbers_of_days");
            entity.Property(e => e.Reason)
                .HasMaxLength(255)
                .HasColumnName("reason");
            entity.Property(e => e.ReqDate).HasColumnName("req_date");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("status");
            entity.Property(e => e.TypeId).HasColumnName("type_id");

            entity.HasOne(d => d.ApprovedByNavigation).WithMany(p => p.LeaveRequestApprovedByNavigations)
                .HasForeignKey(d => d.ApprovedBy)
                .HasConstraintName("FK__LeaveRequ__appro__3E1D39E1");

            entity.HasOne(d => d.Emp).WithMany(p => p.LeaveRequestEmps)
                .HasForeignKey(d => d.EmpId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__LeaveRequ__emp_i__3A4CA8FD");

            entity.HasOne(d => d.Type).WithMany(p => p.LeaveRequests)
                .HasForeignKey(d => d.TypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__LeaveRequ__type___1AD3FDA4");
        });

        modelBuilder.Entity<LeaveType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__LeaveTyp__3213E83F84CC6C9A");

            entity.ToTable("LeaveType");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasColumnName("description");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.PaidPercent)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("paid_percent");
            entity.Property(e => e.RequiresApproval).HasColumnName("requires_approval");
        });

        modelBuilder.Entity<OvertimeRate>(entity =>
        {
            entity.ToTable("OvertimeRate");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.EffectiveDate)
                .HasColumnType("datetime")
                .HasColumnName("effective_date");
            entity.Property(e => e.OvertimeType)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("overtime_type");
            entity.Property(e => e.RateMultiplier)
                .HasColumnType("decimal(4, 2)")
                .HasColumnName("rate_multiplier");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.OvertimeRates)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK_OvertimeRate_Employee");
        });

        modelBuilder.Entity<OvertimeRequest>(entity =>
        {
            entity.HasKey(e => e.ReqId).HasName("PK__Overtime__1513A6FBD2AB57D2");

            entity.ToTable("OvertimeRequest");

            entity.Property(e => e.ReqId).HasColumnName("req_id");
            entity.Property(e => e.ApprovedBy).HasColumnName("approved_by");
            entity.Property(e => e.ApprovedDate).HasColumnName("approved_date");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.EmpId).HasColumnName("emp_id");
            entity.Property(e => e.EndTime).HasColumnName("end_time");
            entity.Property(e => e.Hours)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("hours");
            entity.Property(e => e.LinkedPayrollRunId).HasColumnName("linked_payroll_run_id");
            entity.Property(e => e.OvertimeType).HasColumnName("overtime_type");
            entity.Property(e => e.Reason)
                .HasMaxLength(255)
                .HasColumnName("reason");
            entity.Property(e => e.ReqDate).HasColumnName("req_date");
            entity.Property(e => e.StartTime).HasColumnName("start_time");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("status");

            entity.HasOne(d => d.ApprovedByNavigation).WithMany(p => p.OvertimeRequestApprovedByNavigations)
                .HasForeignKey(d => d.ApprovedBy)
                .HasConstraintName("FK_OvertimeRequest_ApprovedBy");

            entity.HasOne(d => d.Emp).WithMany(p => p.OvertimeRequestEmps)
                .HasForeignKey(d => d.EmpId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OvertimeRequest_Employee");

            entity.HasOne(d => d.LinkedPayrollRun).WithMany(p => p.OvertimeRequests)
                .HasForeignKey(d => d.LinkedPayrollRunId)
                .HasConstraintName("FK_OvertimeRequest_PayrollRun");

            entity.HasOne(d => d.OvertimeTypeNavigation).WithMany(p => p.OvertimeRequests)
                .HasForeignKey(d => d.OvertimeType)
                .HasConstraintName("FK_OvertimeRequest_OvertimeRate");
        });

        modelBuilder.Entity<PayrollRun>(entity =>
        {
            entity.HasKey(e => e.PayrollRunId).HasName("PK__PayrollR__042B3F66A4356420");

            entity.ToTable("PayrollRun");

            entity.Property(e => e.PayrollRunId).HasColumnName("payroll_run_id");
            entity.Property(e => e.ApprovedFinalAt)
                .HasColumnType("datetime")
                .HasColumnName("approved_final_at");
            entity.Property(e => e.ApprovedFinalBy).HasColumnName("approved_final_by");
            entity.Property(e => e.ApprovedFirstAt)
                .HasColumnType("datetime")
                .HasColumnName("approved_first_at");
            entity.Property(e => e.ApprovedFirstBy).HasColumnName("approved_first_by");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.PeriodMonth).HasColumnName("period_month");
            entity.Property(e => e.PeriodYear).HasColumnName("period_year");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20)
                .HasAnnotation("Relational:DefaultConstraintName", "DF_PayrollRun_status")
                .HasColumnName("status");

            entity.HasOne(d => d.ApprovedFinalByNavigation).WithMany(p => p.PayrollRunApprovedFinalByNavigations)
                .HasForeignKey(d => d.ApprovedFinalBy)
                .HasConstraintName("FK_PayrollRun_Employee");

            entity.HasOne(d => d.ApprovedFirstByNavigation).WithMany(p => p.PayrollRunApprovedFirstByNavigations)
                .HasForeignKey(d => d.ApprovedFirstBy)
                .HasConstraintName("FK__PayrollRu__appro__44CA3770");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.PayrollRunCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK__PayrollRu__creat__42E1EEFE");
        });

        modelBuilder.Entity<Permission>(entity =>
        {
            entity.HasKey(e => e.PermissionId).HasName("PK__Permissi__EFA6FB0FEF16C69C");

            entity.HasIndex(e => e.PermissionName, "UQ__Permissi__0FFDA3570EAE1213").IsUnique();

            entity.Property(e => e.PermissionId).HasColumnName("PermissionID");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.PermissionName)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("PK__Roles__8AFACE3A014DF0E9");

            entity.HasIndex(e => e.RoleName, "UQ__Roles__8A2B616029B1E93E").IsUnique();

            entity.Property(e => e.RoleId).HasColumnName("RoleID");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.SecurityLevel).HasAnnotation("Relational:DefaultConstraintName", "DF_Roles_SecurityLevel");
        });

        modelBuilder.Entity<RolePermission>(entity =>
        {
            entity.HasKey(e => e.RolePermissionId).HasName("PK__RolePerm__120F469AC923DC9A");

            entity.ToTable("RolePermission");

            entity.Property(e => e.RolePermissionId).HasColumnName("RolePermissionID");
            entity.Property(e => e.PermissionId).HasColumnName("PermissionID");
            entity.Property(e => e.RoleId).HasColumnName("RoleID");

            entity.HasOne(d => d.Permission).WithMany(p => p.RolePermissions)
                .HasForeignKey(d => d.PermissionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__RolePermi__Permi__236943A5");

            entity.HasOne(d => d.Role).WithMany(p => p.RolePermissions)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__RolePermi__RoleI__245D67DE");
        });

        modelBuilder.Entity<SalaryPolicy>(entity =>
        {
            entity.HasKey(e => e.SalId);

            entity.ToTable("SalaryPolicy");

            entity.Property(e => e.SalId).HasColumnName("sal_id");
            entity.Property(e => e.EffectiveFrom).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasAnnotation("Relational:DefaultConstraintName", "DF_SalaryPolicy_IsActive");
            entity.Property(e => e.OverclockMultiplier)
                .HasAnnotation("Relational:DefaultConstraintName", "DF_SalaryPolicy_OverclockMultiplier")
                .HasColumnType("decimal(5, 2)");
            entity.Property(e => e.SalaryPolicyName)
                .HasMaxLength(50)
                .IsFixedLength();
            entity.Property(e => e.WorkUnitValue).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.YearlyPto)
                .HasAnnotation("Relational:DefaultConstraintName", "DF_SalaryPolicy_YearlyPTO")
                .HasColumnName("YearlyPTO");
        });

        modelBuilder.Entity<TaxBracket>(entity =>
        {
            entity.HasKey(e => e.BracketId).HasName("PK__TaxBrack__8AC2D799EC71D7EC");

            entity.ToTable("TaxBracket");

            entity.Property(e => e.BracketId).HasColumnName("BracketID");
            entity.Property(e => e.LowerBound).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Rate).HasColumnType("decimal(5, 4)");
            entity.Property(e => e.UpperBound).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<WeeklyShift>(entity =>
        {
            entity.HasKey(e => e.ShiftId).HasName("PK__WeeklySh__C0A838813BFFACB5");

            entity.ToTable("WeeklyShift");

            entity.Property(e => e.ShiftDescription).HasMaxLength(100);
            entity.Property(e => e.ShiftName)
                .IsRequired()
                .HasMaxLength(100);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}