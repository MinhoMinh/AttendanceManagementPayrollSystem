@page "/dashboard"

@using AttendanceManagementPayrollSystem.DTO
@using System.Text.Json
@inject NavigationManager Navigation
@inject IJSRuntime JS

<div class="dashboard-page">
    <h1 class="dashboard-title">Dashboard</h1>

    <section class="dashboard-section">
        <DashboardButtonGroup Buttons="@EmployeeService" GroupName="Employee Service"  />
    </section>

    <section class="dashboard-section">
        <DashboardButtonGroup Buttons="@DepartmentHeadService" GroupName="Department Head Service"  />
    </section>

    <section class="dashboard-section">
        <DashboardButtonGroup Buttons="@CompanyService" GroupName="Company Service"  />
    </section>
</div>


<Toaster>
    <Toast @bind-Visible="@toastVisible">
        <ToastHeader>
            <Strong Margin="Margin.IsAuto.FromEnd">Blazorise</Strong>
            <Small>11 mins ago</Small>
            <CloseButton />
        </ToastHeader>
        <ToastBody>
            Hello, world! This is a toast message.
        </ToastBody>
    </Toast>
</Toaster>

@code {
    bool toastVisible = false;
    private bool isLoading = false;
    private async Task SaveAsync()
    {
        isLoading = true;

        // Simulate a long-running task (e.g., API call)
        await Task.Delay(2000);

        isLoading = false;

        // Show a toast notification
        ToastService.Show("Data saved successfully!");
    }

    [Inject] private IToastService ToastService { get; set; } = default!;


    private EmployeeDTO? Employee;

    private List<DashboardButton> EmployeeService = new();
    private List<DashboardButton> DepartmentHeadService = new();
    private List<DashboardButton> CompanyService = new();

    private void BuildButtonGroups()
    {
        if (Employee == null) return;

        EmployeeService = new()
        {
            new() { Label = "Attendance", OnClick = EventCallback.Factory.Create(this, NavigateAttendance), Visible = HasPermission("has_clockin") },
            new() { Label = "Self KPI", OnClick = EventCallback.Factory.Create(this, NavigateSelfKpi), Visible = HasPermission("has_kpi") },
            new() { Label = "Shift", OnClick = EventCallback.Factory.Create(this, NavigateSelfShift), Visible = HasPermission("has_shift") },
            new() { Label = "Leave Request", OnClick = EventCallback.Factory.Create(this, NavigateLeaveRequest), Visible = HasPermission("has_leave_request") },
        };

        DepartmentHeadService = new()
        {
            new() { Text = "Dep KPI", OnClick = EventCallback.Factory.Create(this, NavigateDepKpi), Visible = HasPermission("assign_kpi") },
        };

        CompanyService = new()
        {
            new() { Label = "Upload Clockins", OnClick = EventCallback.Factory.Create(this, NavigateUploadClockins), Visible = HasPermission("upload_clockin") },
            new() { Label = "Pay Run", OnClick = EventCallback.Factory.Create(this, NavigatePayRun), Visible = HasPermission("view_payroll_run") },
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        try
        {
            var empJson = await JS.InvokeAsync<string>("localStorage.getItem", "employee");
            if (!string.IsNullOrWhiteSpace(empJson))
            {
                Employee = JsonSerializer.Deserialize<EmployeeDTO>(empJson);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

        BuildButtonGroups();
        StateHasChanged();
    }

    private bool HasPermission(string task)
    {
        if (Employee?.Permissions == null) return false;
        return Employee.Permissions.Contains(task);
    }

    private void NavigateAttendance() => Navigation.NavigateTo("/attendance/self");
    private void NavigateSelfKpi() => Navigation.NavigateTo("/kpi/self");
    private void NavigateSelfShift() => Navigation.NavigateTo("/shift/self");
    private void NavigateDepKpi() => Navigation.NavigateTo("/kpi/head");
    private void NavigateUploadClockins() => Navigation.NavigateTo("/xlsupload");
    private void NavigatePayRun() => Navigation.NavigateTo("/payruns");
    private void NavigateLeaveRequest() => Navigation.NavigateTo("/leaverequest");
}
