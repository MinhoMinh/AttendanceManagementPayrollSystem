@page "/kpi/head"
@using AttendanceManagementPayrollSystem.DTO
@using System.Text.Json
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject IHttpClientFactory HttpFactory

<h3>Department KPI</h3>

<div class="d-flex align-items-center gap-2 mb-3">
    <MonthYearPicker @bind-SelectedMonth="periodMonth" @bind-SelectedYear="periodYear" />
    <button class="btn btn-primary" @onclick="LoadEmployees">Apply</button>
</div>


<div class="d-flex" style="height:500px;">
    <!-- Left: Employee list -->
    <div class="flex-shrink-0" style="width:250px; border-right:1px solid #ccc; overflow:auto;">
        <h5>Employees</h5>
        @if (employees is null)
        {
            <p>No data loaded</p>
        }
        else
        @if (employees.Count == 0)
        {
            <p>No employee found</p>
        }
        else
        {
            <ul class="list-group">
                @foreach (var emp in employees)
                {
                    <li class="list-group-item @(selectedEmployee == emp ? "active" : "")"
                        @onclick="() => SelectEmployee(emp)">
                        @emp.EmpName
                    </li>
                }
            </ul>
        }
    </div>

    <!-- Right: KPI components table -->
    <div class="flex-grow-1 p-3" style="overflow:auto;">
        <h5>KPI Components</h5>
        @if (selectedEmployee == null)
        {
            <p>Select an employee to view KPI components.</p>
        }
        else
        {
            <KpiComponentTable Kpi="@selectedEmployeeKpi" OnSave="HandleSave" />
        }
    </div>
</div>



@code {
    private int periodYear = DateTime.Now.Year;
    private int periodMonth = DateTime.Now.Month;

    private EmployeeDTO? Head;

    private List<EmployeeBasicDTO>? employees;
    private EmployeeBasicDTO? selectedEmployee;
    private KpiDto? selectedEmployeeKpi;

    protected override async Task OnInitializedAsync()
    {
        var empJson = await JS.InvokeAsync<string>("localStorage.getItem", "employee");
        if (string.IsNullOrWhiteSpace(empJson)) return;

        Head = JsonSerializer.Deserialize<EmployeeDTO>(empJson);
    }

    private async Task LoadEmployees()
    {
        if (Head == null) return;

        var client = HttpFactory.CreateClient("ApiClient");

        // Call your API to get employees with KPI for selected month/year
        employees = await client.GetFromJsonAsync<List<EmployeeBasicDTO>>(
            $"http://localhost:5038/api/kpi/head?headId={Head.EmpId}&month={periodMonth}&year={periodYear}");

        selectedEmployee = null;
        selectedEmployeeKpi = null;
    }

    private async Task SelectEmployee(EmployeeBasicDTO emp)
    {
        selectedEmployee = emp;

        var client = HttpFactory.CreateClient("ApiClient");

        selectedEmployeeKpi = await client.GetFromJsonAsync<KpiDto>(
            $"http://localhost:5038/api/kpi/head/kpi?empId={selectedEmployee.EmpId}&month={periodMonth}&year={periodYear}");

    }

    private async Task HandleSave()
    {
        if (Head == null)
        {
            await JS.InvokeVoidAsync("alert", "Head not set.");
            return;
        }

        if (selectedEmployee == null)
        {
            await JS.InvokeVoidAsync("alert", "No employee selected.");
            return;
        }

        if (selectedEmployeeKpi == null)
        {
            await JS.InvokeVoidAsync("alert", "No KPI selected.");
            return;
        }

        selectedEmployeeKpi.AssignedBy = Head.EmpId;

        var client = HttpFactory.CreateClient("ApiClient");

        string url = selectedEmployeeKpi.KpiMode switch
        {
            "edit" => $"api/kpi/head/{selectedEmployee.EmpId}/edit",
            "assign" => $"api/kpi/head/{selectedEmployee.EmpId}/assign",
            _ => null
        };

        if (url == null)
        {
            await JS.InvokeVoidAsync("alert", $"Unsupported KPI mode: {selectedEmployeeKpi.KpiMode}");
            return;
        }

        try
        {
            var response = await client.PostAsJsonAsync(url, selectedEmployeeKpi);

            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("console.log", "KPI saved successfully!");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Failed to save KPI: {error}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error saving KPI: {ex.Message}");
        }
    }

    // private async Task HandleSave()
    // {
    //     if (Head == null || selectedEmployee == null || selectedEmployeeKpi == null) return;

    //     selectedEmployeeKpi.AssignedBy = Head.EmpId;

    //     var client = HttpFactory.CreateClient("ApiClient");


    //     HttpResponseMessage response = null;

    //     if (selectedEmployeeKpi.KpiMode == "edit")
    //     {
    //         response  = await client.PostAsJsonAsync($"api/kpi/head/{selectedEmployee.EmpId}/edit", selectedEmployeeKpi);
    //     }
    //     else if (selectedEmployeeKpi.KpiMode == "assign")
    //     {
    //         response = await client.PostAsJsonAsync($"api/kpi/head/{selectedEmployee.EmpId}/assign", selectedEmployeeKpi);
    //     }

    //     if (!response.IsSuccessStatusCode)
    //     {
    //         ErrorMessage = await response.Content.ReadAsStringAsync() ?? "Failed to save KPI";
    //         return;
    //     }

    //     await JS.InvokeVoidAsync("console.log", "KPI saved");
    // }
}