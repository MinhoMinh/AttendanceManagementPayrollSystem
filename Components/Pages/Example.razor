@page "/kpi/self"
@using AttendanceManagementPayrollSystem.DTO
@using System.Text.Json
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject IHttpClientFactory HttpFactory

<h3>My KPI</h3>

<div class="d-flex align-items-center gap-2 mb-3">
    <MonthYearPicker @bind-SelectedMonth="periodMonth" @bind-SelectedYear="periodYear" />
    <button class="btn btn-primary" @onclick="ApplyPeriod">Apply</button>
</div>

<p>Selected Period: @periodYear / @periodMonth</p>


<KpiComponentTable Kpi="@Kpi" OnSave="HandleSave" />


@code {
    private int periodYear = DateTime.Now.Year;
    private int periodMonth = DateTime.Now.Month;
    private KpiDto? Kpi;

    private EmployeeDTO? Employee;

    // private async Task LoadEmployeeAsync()
    // {
    //     //Get the JSON string from localStorage
    //     var json = await JS.InvokeAsync<string>("localStorage.getItem", "employee");

    //     if (!string.IsNullOrWhiteSpace(json))
    //     {
    //         Employee = JsonSerializer.Deserialize<EmployeeDTO>(json);
    //     }
    // }

    //protected override async Task OnInitializedAsync()
    //{
    // var empJson = await JS.InvokeAsync<string>("localStorage.getItem", "employee");
    // if (string.IsNullOrWhiteSpace(empJson)) return;

    // var employee = JsonSerializer.Deserialize<EmployeeDTO>(empJson);
    // if (employee == null) return;

    // int month = periodMonth;
    // int year = periodYear;

    // try
    // {
    //     var client = HttpFactory.CreateClient("ApiClient");
    //     var kpi = await client.GetFromJsonAsync<KpiDto>($"api/kpi/self?empId=9&month={periodMonth}&year={periodYear}");


    // }
    // catch (Exception ex)
    // {
    //     Console.WriteLine($"Error fetching KPI: {ex.Message}");
    // }
    //}

    private async Task ApplyPeriod()
    {
        Console.WriteLine($"periodmonth = {periodMonth}");
        try
        {
            var client = HttpFactory.CreateClient("ApiClient");
            Kpi = await client.GetFromJsonAsync<KpiDto>($"api/kpi/self?empId=9&month={periodMonth}&year={periodYear}");

            //StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching KPI: {ex.Message}");

            Kpi = null;
        }
    }

    private void HandleSave(KpiDto savedKpi)
    {
        Console.WriteLine("Saved!");

        // TODO: send to API or persist changes

    }
}
