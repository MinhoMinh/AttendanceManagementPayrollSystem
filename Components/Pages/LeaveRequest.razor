@page "/leaverequest"
@inject IHttpClientFactory HttpFactory
@inject IJSRuntime JS

<h3>Leave Request Form</h3>

<div class="leave-request-container">
    <div class="mb-3">
        <label class="form-label">Leave Type</label>
        <select class="form-select" @bind="selectedTypeId">
            <option value="">-- Select Type --</option>
            @foreach (var type in leaveTypes)
            {
                <option value="@type.Id">@type.Name</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label class="form-label">Start Date</label>
        <input type="date" class="form-control" @bind="startDate" />
    </div>

    <div class="mb-3">
        <label class="form-label">End Date</label>
        <input type="date" class="form-control" @bind="endDate" />
    </div>

    <div class="mb-3">
        <label class="form-label">Reason</label>
        <textarea class="form-control" @bind="reason"></textarea>
    </div>

    <div class="mb-3">
        <label class="form-label">Details</label>
        <textarea class="form-control" @bind="details"></textarea>
    </div>

    <button class="btn btn-primary w-100" @onclick="SubmitRequest">Submit Request</button>
</div>

@code {
    private int? selectedTypeId;
    private DateTime startDate = DateTime.Now;
    private DateTime endDate = DateTime.Now;
    private string? reason;
    private string? details;
    private int currentEmpId;

    private List<LeaveType> leaveTypes = new()
    {
        new LeaveType { Id = 1, Name = "Annual Leave" },
        new LeaveType { Id = 2, Name = "Maternity Leave" },
        new LeaveType { Id = 3, Name = "Paternity Leave" },
        new LeaveType { Id = 4, Name = "Unpaid Leave" },
        new LeaveType { Id = 5, Name = "Vacation Leave" },
        new LeaveType { Id = 6, Name = "Sick Leave" },
        new LeaveType { Id = 7, Name = "Overtime Leave" }
    };

    protected override async Task OnInitializedAsync()
    {
        var empJson = await JS.InvokeAsync<string>("localStorage.getItem", "employee");
        if (!string.IsNullOrEmpty(empJson))
        {
            var emp = System.Text.Json.JsonSerializer.Deserialize<EmployeeDTO>(empJson);
            if (emp != null)
                currentEmpId = emp.EmpId;
        }
    }

    private async Task SubmitRequest()
    {
        if (currentEmpId == 0 || selectedTypeId == null || string.IsNullOrWhiteSpace(reason) || string.IsNullOrWhiteSpace(details))
        {
            await JS.InvokeVoidAsync("alert", "Please fill in all fields.");
            return;
        }

        var dto = new
        {
            EmpId = currentEmpId,
            TypeId = selectedTypeId,
            StartDate = startDate.ToString("yyyy-MM-dd"),
            EndDate = endDate.ToString("yyyy-MM-dd"),
            Reason = reason,
            Details = details
        };

        try
        {
            var client = HttpFactory.CreateClient("ApiClient");
            var response = await client.PostAsJsonAsync("api/LeaveRequest", dto);

            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Leave request submitted successfully!");
                selectedTypeId = null;
                startDate = DateTime.Now;
                endDate = DateTime.Now;
                reason = string.Empty;
                details = string.Empty;
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Failed to submit leave request: {error}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    private class LeaveType { public int Id { get; set; } public string Name { get; set; } = string.Empty; }
    private class EmployeeDTO { public int EmpId { get; set; } public string EmpName { get; set; } = string.Empty; public string EmpRole { get; set; } = string.Empty; public List<string> Permissions { get; set; } = new List<string>(); }
}
