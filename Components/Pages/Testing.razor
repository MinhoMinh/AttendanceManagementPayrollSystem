@page "/attendance/self"

@using System.Net.Http.Json
@using AttendanceManagementPayrollSystem.DTO
@using BlazorCalendar
@using BlazorCalendar.Models
@using System.Text.Json
@using Blazorise
@inject IHttpClientFactory HttpFactory
@inject IJSRuntime JS

<Card>
    <CardBody>
        <Div Class="d-flex flex-row align-items-start gap-3">
            <Field>
                <FieldLabel>Xem theo</FieldLabel>
                <Select TValue="DisplayedView" @bind-SelectedValue="SelectedView">
                    <SelectItem Value="DisplayedView.Annual">Theo năm</SelectItem>
                    <SelectItem Value="DisplayedView.Monthly">Theo tháng</SelectItem>
                </Select>
            </Field>
            

        @if (SelectedView == DisplayedView.Monthly)
        {
                <Field>
                    <FieldLabel>Chọn tháng/năm</FieldLabel>
                    <FieldBody>
                        <Div Class="d-flex flex-column picker-container" Position="Position.Relative">
                        <DatePicker TValue="DateTime?"
                                    Date="@SelectedDate"
                                        DateChanged="@(value => OnMonthlyDateChanged(value))"
                                    DisplayFormat="MM/yyyy" />
                        </Div>
                    </FieldBody>
                </Field>
        }
        else if (SelectedView == DisplayedView.Annual)
        {
            <Div Class="d-flex flex-row align-items-start gap-2">
                <Field>
                    <FieldLabel>Ngày bắt đầu</FieldLabel>
                    <FieldBody>
                        <Div Class="d-flex flex-column picker-container" Position="Position.Relative">
                            <DatePicker TValue="DateTime?"
                                        Date="@SelectedDate"
                                            DateChanged="@(value => OnAnnualDateChanged(value))"
                                        DisplayFormat="dd/MM/yyyy" />
                        </Div>
                    </FieldBody>
                    <FieldHelp>Format: DD/MM/YYYY</FieldHelp>
                </Field>
                <Field>
                    <FieldLabel>Số tháng hiển thị</FieldLabel>
                    <NumericEdit TValue="int" @bind-Value="MonthsToDisplay" Min="1" Max="12" />
                </Field>
            </Div>
        }
        </Div>
    </CardBody>
</Card>

<div class="row mt-3">
    <!-- Left: Calendar view -->
    <div class="col-md-10 col-12">
        <Card>
            <CardHeader>Calendar</CardHeader>
            <CardBody>
                <!-- Optional info above calendar -->
                <p class="mb-2"><strong>Employee:</strong> John Doe</p>
                <p class="mb-2"><strong>Department:</strong> HR</p>

                <CalendarContainer DisplayedView="SelectedView" FirstDate="@SelectedDate" TasksList="@MonthlyTasks.ToArray()">
                    <AnnualView Months="@MonthsToDisplay" />
                    <MonthlyView DayClick="ViewDay" />
                </CalendarContainer>
            </CardBody>
        </Card>
    </div>

    <!-- Right: Day details -->
    <div class="col-md-2 col-12 mt-2 mt-md-0">
        <Card>
            <CardHeader>Details</CardHeader>
            <CardBody>
                @if (SelectedDay != null)
                {
                    <div>
                        <p><strong>Date:</strong> @SelectedDay.Value.ToString("dd/MM/yyyy")</p>
                        <p>Tasks / Clock-ins go here...</p>
                    </div>
                }
                else
                {
                    <p>Select a day to see details</p>
                }
            </CardBody>
        </Card>
    </div>
</div>


@code {
    private DisplayedView _selectedView = DisplayedView.Monthly;
    private DisplayedView SelectedView
    {
        get => _selectedView;
        set
        {
            if (_selectedView == value)
                return;

            _selectedView = value;
            OnSelectedViewChanged(value);
        }
    }

    private List<Tasks> MonthlyTasks = new();
    private List<Tasks> AnnuallyTasks = new();

    private DateTime today = DateTime.Today;
    private DateTime SelectedDate = DateTime.Today;
    private DateTime? SelectedDay;
    private int _monthsToDisplay = 8;
    private int MonthsToDisplay
    {
        get => _monthsToDisplay;
        set
        {
            if (_monthsToDisplay == value)
                return;

            var oldValue = _monthsToDisplay;
            _monthsToDisplay = value;

            OnMonthsToDisplayChanged(oldValue, value);
        }
    }

    private void OnMonthsToDisplayChanged(int oldValue, int newValue)
    {
        if (newValue > oldValue)
            LoadMonthlyData();
    }

    private EmployeeDTO? Employee;
    private ClockinDTO? MonthlyClockin;
    private List<ClockinDTO>? AnnualClockins = new();
    private Dictionary<DateTime, DailyDetailDTO> DayData = new();
    private Dictionary<DateTime, ClockinComponentDto> ComponentData = new();

    [Inject] INotificationService NotificationService { get; set; }


    // protected override void OnInitialized()
    // {
    //     MonthlyTasks = new()
    //     {
    //         new Tasks { ID = 1, DateStart = SelectedDate.AddDays(8), DateEnd = SelectedDate.AddDays(8), Code = "8.0/8.0", Caption = "Lorem ipsum dolor sit amet" },
    //         new Tasks { ID = 2, DateStart = SelectedDate.AddDays(8), DateEnd = SelectedDate.AddDays(8), Code = "8.0/8.0", Caption = "Lorem ipsum dolor sit amet" },
    //         new Tasks { ID = 3, DateStart = SelectedDate.AddDays(-3), DateEnd = SelectedDate.AddDays(-3), Code = "7.5/8.0", Caption = "Fusce quis purus eu ante" },
    //         new Tasks { ID = 4, DateStart = SelectedDate.AddDays(-7), DateEnd = SelectedDate.AddDays(-7), Code = "4.0/8.0" },
    //         new Tasks { ID = 5, DateStart = SelectedDate.AddDays(-2), DateEnd = SelectedDate.AddDays(-2), Code = "8.0/8.0", Caption = "Ut sit amet turpis eget" }
    //     };

    //     foreach (var task in MonthlyTasks)
    //     {
    //         task.Color = task.Code == "8.0/8.0" ? "#19C319" : "#FF6B6B";
    //     }
    // }

    private bool _initialized;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_initialized)
        {
            _initialized = true;
            var empJson = await JS.InvokeAsync<string>("localStorage.getItem", "employee");
            if (string.IsNullOrWhiteSpace(empJson)) 
            {
                NotificationService.Warning("Không thể tìm thấy thông tin nhân viên!", "Lỗi");
                return;
            };

            Employee = JsonSerializer.Deserialize<EmployeeDTO>(empJson);
            StateHasChanged();
        }
    }


    private async Task OnMonthlyDateChanged(DateTime? value)
    {
        var newDate = value ?? DateTime.Today;
        var normalized = new DateTime(newDate.Year, newDate.Month, 1);

        bool monthChanged = 
             SelectedDate.Month != normalized.Month
            || SelectedDate.Year != normalized.Year;

        SelectedDate = normalized;


        if (monthChanged)
            await LoadMonthlyData();
    }

    private async Task OnAnnualDateChanged(DateTime? value)
    {
        var newDate = value ?? DateTime.Today;
        var normalized = new DateTime(newDate.Year, newDate.Month, newDate.Day);

        bool monthChanged =
             SelectedDate.Month != normalized.Month
            || SelectedDate.Year != normalized.Year;

        SelectedDate = normalized;

        if (monthChanged)
            await LoadMonthlyData();
    }

    private void OnSelectedViewChanged(DisplayedView newValue)
    {

    }

    private async Task LoadMonthlyData()
    {
        if (Employee == null)
        {
            NotificationService.Warning("Không tìm thấy thông tin nhân viên!", "Lỗi");
            return;
        };

        var client = HttpFactory.CreateClient("ApiClient");
        var response = await client.GetFromJsonAsync<ClockinDTO>($"api/clockin/employee?empId={Employee.EmpId}&month={SelectedDate.Month}&year={SelectedDate.Year}");
        if (response == null)
        {
            NotificationService.Warning("Không tìm thấy thông tin chấm công của nhân viên!", "Lỗi");
            return;
        }

        MonthlyClockin = response;

        MonthlyTasks.Clear();
        int id = 1;

        //NotificationService.Warning($"check record count {MonthlyClockin.DailyRecords[0].}", "Debug");

        foreach (var record in MonthlyClockin.DailyRecords)
        {
            if (record.ScheduledHour != null)
            {
                bool isFull = (record.ActualHour ?? 0m) >= (record.ScheduledHour ?? 0m);
                string color = isFull ? "#90EE90" : "#FFB6C1";

                MonthlyTasks.Add(new Tasks
                    {
                        ID = id++,
                        DateStart = new DateTime(MonthlyClockin.Date.Year, MonthlyClockin.Date.Month, record.Day),
                        DateEnd = new DateTime(MonthlyClockin.Date.Year, MonthlyClockin.Date.Month, record.Day),
                        Code = $"Giờ làm: {(record.ActualHour ?? 0m):F2}/{(record.ScheduledHour ?? 0m):F2}",
                        Caption = "Lorem ipsum dolor sit amet",
                        Color = color,
                    });
            }
        }

        // DayData.Clear();

        // foreach (var c in Clockin.DailyRecords)
        // {
        //     DayData[new DateTime(periodYear, periodMonth, c.Day)] = c;
        // }
    }

    private async Task ViewDay(ClickEmptyDayParameter clickParams)
    {
        if (Employee == null) return;

    }

}