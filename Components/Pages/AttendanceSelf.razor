
@using System.Net.Http.Json
@using System.Text.Json
@using AttendanceManagementPayrollSystem.DTO
@inject IHttpClientFactory HttpFactory
@inject IJSRuntime JS

<div class="d-flex align-items-center gap-2 mb-3">
    <MonthYearPicker @bind-SelectedMonth="periodMonth"
                     @bind-SelectedYear="periodYear" />
    <button class="btn btn-primary" @onclick="ApplyPeriod">Apply</button>
</div>

<div class="d-flex">
    <div style="flex: 1;">
        @if (Clockin != null)
        {
            <Calendar Year="@periodYear"
                      Month="@periodMonth"
                      DayData="DayData"
                      DayTemplate="DayTemplate" />
        }
    </div>

    <div style="width: 300px; margin-left: 16px;">
        @if (SelectedRecord != null)
        {
            <h5>Day @SelectedRecord.Day</h5>
            <div>Logs: @string.Join(", ", SelectedRecord.Logs)</div>
            <div>Actual: @string.Join(", ", SelectedRecord.ActualUnit)</div>
            <div>Scheduled: @string.Join(", ", SelectedRecord.ScheduledUnit)</div>
        }
        else
        {
            @if (Clockin != null)
            {
                <em>Select a day</em>
            }
        }
    </div>
</div>

@code {
    private int periodMonth = DateTime.Now.Month - 1;
    private int periodYear = DateTime.Now.Year;
    private EmployeeDTO? Employee;
    private ClockinDTO? Clockin;
    private Dictionary<DateTime, object> DayData = new();

    private DailyDetailDTO? SelectedRecord;

    protected override async Task OnInitializedAsync()
    {
        var empJson = await JS.InvokeAsync<string>("localStorage.getItem", "employee");
        if (string.IsNullOrWhiteSpace(empJson)) return;

        Employee = JsonSerializer.Deserialize<EmployeeDTO>(empJson);
    }

    private async Task ApplyPeriod()
    {
        if (Employee == null) return;

        var client = HttpFactory.CreateClient("ApiClient");
        var response = await client.GetFromJsonAsync<ClockinDTO>($"api/clockin/employee?empId={Employee.EmpId}&month={periodMonth}&year={periodYear}");
        if (response == null) return;

        Clockin = response;
        DayData.Clear();

        foreach (var c in Clockin.DailyRecords)
        {
            DayData[new DateTime(periodYear, periodMonth, c.Day)] = c;
        }
    }


    private RenderFragment<Calendar.CalendarDayContext> DayTemplate => ctx => @<div @onclick="() => OnDayClick(ctx)">
        @if (ctx.Data is DailyDetailDTO record)
    {
        <div>@(record.ActualUnit) / @(record.ScheduledUnit)</div>
    }
    </div>;


    private void OnDayClick(Calendar.CalendarDayContext ctx)
    {
        SelectedRecord = ctx.Data as DailyDetailDTO;
    }

}
