@using AttendanceManagementPayrollSystem.DTO
@using System.Collections.Generic
@inject IJSRuntime JS

@code {
    [Parameter]
    public KpiDto? Kpi { get; set; }

    [Parameter]
    public EventCallback<KpiDto> OnSave { get; set; }

    private KpiComponentDto newComponent = new();

    private void AddComponent()
    {
        if (!string.IsNullOrWhiteSpace(newComponent.Name) && !string.IsNullOrWhiteSpace(newComponent.Description)
        && newComponent.TargetValue != 0 && newComponent.Weight != 0)
        {
            // Auto-generate a temporary ID
            newComponent.KpiComponentId = Kpi.Components.Count > 0
                ? Kpi.Components.Max(c => c.KpiComponentId) + 1
                : 1;

            Kpi.Components.Add(new KpiComponentDto
                {
                    KpiComponentId = newComponent.KpiComponentId,
                    Name = newComponent.Name,
                    Description = newComponent.Description,
                    TargetValue = newComponent.TargetValue,
                    Weight = newComponent.Weight
                });

            newComponent = new();

            StateHasChanged();
        }
    }

    private void DeleteComponent(KpiComponentDto comp)
    {
        Kpi.Components.Remove(comp);
    }

    private async Task SaveAsync()
    {
        var totalWeight = Kpi.Components.Sum(c => c.Weight);
        if (totalWeight != 100)
        {
            await JS.InvokeVoidAsync("alert", $"Total weight is {totalWeight}, must equal 100.");
            return;
        }

        bool invalidScore = Kpi.Components.Any(c =>
            (c.SelfScore.HasValue && (c.SelfScore < 0 || c.SelfScore > 10)) ||
            (c.AssignedScore.HasValue && (c.AssignedScore < 0 || c.AssignedScore > 10))
        );

        if (invalidScore)
        {
            await JS.InvokeVoidAsync("alert", "One or more scores are outside the range 0–10.");
            return;
        }

        if (OnSave.HasDelegate)
            await OnSave.InvokeAsync(Kpi);

        await JS.InvokeVoidAsync("alert", "Save successful.");
    }

    private bool CanEditAll => Kpi.KpiMode == "edit";
    private bool CanEditSelf => Kpi.KpiMode == "self";
    private bool CanEditAssign => Kpi.KpiMode == "assign";
    private bool IsView => Kpi.KpiMode == "view";
}

@if (Kpi == null)
{
    <p>No KPI data for this period.</p>
}
else
{
    <div class="card p-3">
        <h3>KPI Details</h3>
        <div><strong>ID:</strong> @Kpi.KpiId</div>
        <div><strong>Period:</strong> @Kpi.PeriodMonth / @Kpi.PeriodYear</div>
        <div><strong>Rate:</strong> @Kpi.KpiRate</div>
        <div><strong>Mode:</strong> @Kpi.KpiMode</div>

        @if (Kpi.Components.Count == 0)
        {
            <p>No KPI Component data for this period.</p>
        }
        else
        {
            
        
        <h4 class="mt-3">Components</h4>
        <table class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Target</th>
                    <th>Achieved</th>
                    <th>Weight</th>
                    <th>Self Score</th>
                    <th>Assigned Score</th>
                    @if (CanEditAll)
                    {
                        <th>Actions</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var comp in Kpi.Components)
                {
                    <tr>
                        <td>
                            @if (CanEditAll)
                            {
                                <input class="form-control" @bind="comp.Name" />
                            }
                            else
                            {
                                @comp.Name
                            }
                        </td>
                        <td>
                            @if (CanEditAll)
                            {
                                <input class="form-control" @bind="comp.Description" />
                            }
                            else
                            {
                                @comp.Description
                            }
                        </td>
                        <td>
                            @if (CanEditAll)
                            {
                                <input type="number" class="form-control" @bind="comp.TargetValue" />
                            }
                            else
                            {
                                @comp.TargetValue
                            }
                        </td>
                        <td>
                            @if (CanEditAssign)
                            {
                                <input type="number" class="form-control" @bind="comp.AchievedValue" />
                            }
                            else
                            {
                                @comp.AchievedValue
                            }
                        </td>
                        <td>
                            @if (CanEditAll)
                            {
                                <input type="number" class="form-control" @bind="comp.Weight" />
                            }
                            else
                            {
                                @comp.Weight
                            }
                        </td>
                        <td>
                            @if (CanEditSelf)
                            {
                                <input type="number" step="0.1" class="form-control" @bind="comp.SelfScore" />
                            }
                            else
                            {
                                @comp.SelfScore
                            }
                        </td>
                        <td>
                            @if (CanEditAssign)
                            {
                                <input type="number" step="0.1" class="form-control" @bind="comp.AssignedScore" />
                            }
                            else
                            {
                                @comp.AssignedScore
                            }
                        </td>
                        @if (CanEditAll)
                        {
                            <td>
                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteComponent(comp)">Delete</button>
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
        

        @if (CanEditAll)
        {
            <div class="mt-3 border p-3 rounded">
                <h5>Add New Component</h5>
                <div class="row mb-2">
                    <div class="col">
                        <input class="form-control" placeholder="Name" @bind="newComponent.Name" />
                    </div>
                    <div class="col">
                        <input class="form-control" placeholder="Description" @bind="newComponent.Description" />
                    </div>
                    <div class="col">
                        <input type="number" class="form-control" placeholder="Target" @bind="newComponent.TargetValue" />
                    </div>
                    <div class="col">
                        <input type="number" class="form-control" placeholder="Weight" @bind="newComponent.Weight" />
                    </div>
                    <div class="col">
                        <button class="btn btn-primary w-100" @onclick="AddComponent">Add</button>
                    </div>
                </div>
            </div>
        }

        @if (!IsView)
        {
            <div class="mt-3 text-end">
                <button class="btn btn-success" @onclick="SaveAsync">Save</button>
            </div>
        }
        }
    </div>
}